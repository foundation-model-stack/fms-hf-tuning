# Copyright The FMS HF Tuning Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Standard
import logging

# Third Party
from aim.hugging_face import AimCallback  # pylint: disable=import-error

# Local
from .tracker import Tracker
from tuning.config.tracker_configs import TrackerConfigs


class RunIDExporterAimCallback(AimCallback):
    """
    Custom Aimstack callback is used to export run id from Aim
    as soon as it is created, which is during on_init_end.
    """

    _use_aimstack = True
    # path where we export run hash generated by Aim
    # This is used to link back to the expriments from outside aimstack
    run_id_export_path = None
    logger = None
    tracker: Tracker = None

    # Override Aimstack callback on_init_end function
    # First call AimCallback.setup to initialize internal structures
    # second export Aimstack's run hash to a file
    # hash is exported to, AimConfig.aim_run_id_export_path if it is passed
    # or, training_args.output_dir/aimstack_tracker.json if output_dir is present
    # Exported hash looks like '{"run_hash":"<hash>"}' in the file
    # hash is not exported if both paths are invalid
    def on_init_end(self, args, state, control, **kwargs):
        """Override the `on_init_end` function in the `Aimstack` callback.

            This function performs the following steps:
            1. Calls `aim.hugging_face.AimCallback.setup` to
                initialize internal `aim` structures.
            2. Exports the `Aimstack` run hash:
                - If `AimConfig.aim_run_id_export_path` is provided, the hash is exported
                    to `AimConfig.aim_run_id_export_path/aimstack_tracker.json`
                - If `AimConfig.aim_run_id_export_path` is not provided but
                    `args.output_dir` is specified, the hash is exported to
                - If neither path is valid, the hash is not exported.

            The exported hash is formatted as '{"run_hash":"<hash>"}'.

        Args:
            For the arguments see reference to transformers.TrainingCallback
        """
        super().on_init_end(args, state, control, **kwargs)

        if not self._use_aimstack or not state.is_world_process_zero:
            return

        if not self._run:
            self.logger.warning(
                "Aim tracker was requested but did not get initialized;"
                + " Please check the config"
            )
            self._use_aimstack = False
            return

        if self.tracker:
            run_info = {"run_hash": str(self.experiment.hash)}
            self.tracker.export_run_info(args, run_info)

        # Track any additional metadata and metrics requested
        if self.tracker.additional_metrics is not None:
            for stage, metrics in self.tracker.additional_metrics.items():
                for name, value in metrics.items():
                    self.experiment.track(value, name=name, context={"subset": stage})

        if self.tracker.additional_metadata is not None:
            for name, params in self.tracker.additional_metadata.items():
                if isinstance(params, dict):
                    for key, value in params.items():
                        self.experiment.set((name, key), value, strict=False)
                else:
                    self.experiment.set(
                        ("additional_metadata", name), params, strict=False
                    )


class AimStackTracker(Tracker):
    def __init__(self, tracker_config: TrackerConfigs):
        """Tracker which uses Aimstack to collect and store metrics.

        Args:
            tracker_config (AimConfig): A valid AimConfig which contains either
            information about the repo or the server and port where aim db is present.
        """
        super().__init__(name="aim", tracker_config=tracker_config)
        # Get logger with root log level
        self.logger = logging.getLogger(__name__)

    def get_hf_callback(self):
        """Returns the aim.hugging_face.AimCallback object associated with this tracker.

        Raises:
            ValueError: If the config passed at initialise does not contain one of
                aim_repo or server and port where aim db is present.

        Returns:
            aim.hugging_face.AimCallback: The Aimcallback initialsed with the config
            provided at init time.
        """
        c = self.config
        exp = c.aim_experiment
        url = c.aim_url
        repo = c.aim_repo

        if url is not None:
            cb = RunIDExporterAimCallback(repo=url, experiment=exp)
        elif repo:
            cb = RunIDExporterAimCallback(repo=repo, experiment=exp)
        else:
            self.logger.error(
                "Aim tracker requested but repo or server is not specified. "
                + "Please specify either aim repo or aim server ip and port for using Aim."
            )
            raise ValueError(
                "Aim tracker requested but repo or server is not specified."
            )

        if cb is not None:
            cb.hash_export_path = self.config.run_uri_export_path
            cb.logger = self.logger
            cb.tracker = self

        self.hf_callback = cb
        return self.hf_callback
